name: Smart Multi-Environment Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  analyze-deployment:
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.analyze.outputs.strategy }}
      environments: ${{ steps.analyze.outputs.environments }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Analyze Changes and Determine Strategy
        id: analyze
        run: |
          npm install -g @anthropic-ai/claude-code
          
          # 分析代码变更影响
          claude -p "分析以下代码变更，确定最佳部署策略：
          
          $(git diff HEAD~1..HEAD)
          
          考虑因素：
          1. 变更的影响范围（前端/后端/数据库）
          2. 是否包含破坏性更改
          3. 是否需要数据迁移
          4. 推荐的部署策略（滚动更新/蓝绿部署/金丝雀）
          
          返回JSON格式：{strategy, affectedComponents, requiresDowntime, recommendedEnvironments}" \
          --output-format text > deployment-analysis.json
          
          STRATEGY=$(jq -r '.strategy' deployment-analysis.json)
          ENVIRONMENTS=$(jq -r '.recommendedEnvironments' deployment-analysis.json)
          
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT

  deploy:
    needs: analyze-deployment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.analyze-deployment.outputs.environments) }}
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy with Claude Code Assistance
        env:
          DEPLOYMENT_STRATEGY: ${{ needs.analyze-deployment.outputs.strategy }}
          TARGET_ENV: ${{ matrix.environment }}
        run: |
          echo "部署到环境: $TARGET_ENV，策略: $DEPLOYMENT_STRATEGY"
          
          # 让Claude Code生成环境特定的部署脚本
          claude -p "生成针对$TARGET_ENV环境的部署脚本，使用$DEPLOYMENT_STRATEGY策略。
          
          包含：
          1. 环境变量配置
          2. 健康检查
          3. 回滚机制
          4. 监控告警设置
          
          请生成可执行的bash脚本。" > deploy-script.sh
          
          chmod +x deploy-script.sh
          ./deploy-script.sh
